package com.sungard.hackathon.monster.listener;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.context.ApplicationEvent;
import org.springframework.context.ApplicationListener;

public class MemoryDatabaseListener implements ApplicationListener<ApplicationEvent> {
    
    private static Log log = LogFactory.getLog(MemoryDatabaseListener.class);
    
    @Override
    public void onApplicationEvent(ApplicationEvent event) {
        try {
            prepMemoryDatabase();
        } catch (SQLException e) {
            log.error("Create Database Error", e);
            e.printStackTrace();
        }
    }
    
    private static void prepMemoryDatabase() throws SQLException {
        Connection conn = null;
        Statement st = null;
        
        try {
            Class.forName("org.hsqldb.jdbc.JDBCDriver");
            conn = DriverManager.getConnection("jdbc:hsqldb:mem:localDb", "SA", "");
            st = conn.createStatement();
            
            StringBuilder sb = new StringBuilder();
            sb.append("CREATE MEMORY TABLE PERSON(");
            sb.append("ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,");
            sb.append("NAME VARCHAR(255) NOT NULL,");
            sb.append("EMAIL VARCHAR(255) NOT NULL,");
            sb.append("IMAGE1 OTHER,");
            sb.append("IMAGE2 OTHER,");
            sb.append("IMAGE3 OTHER)");
            st.executeUpdate(sb.toString());
        } catch (ClassNotFoundException e) {
            throw new SQLException("HSQLDB database driver is not found", e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException se) {
                    log.error("Failed to close emulation database setup Connection", se);
                    se.printStackTrace();
                }
            }
        }
    }
}
